<?php

namespace cetver\RoutesCollector\tests\functional\commands;

use cetver\RoutesCollector\commands\RoutesController;
use cetver\RoutesCollector\models\Route;
use Codeception\Util\Fixtures;
use InvalidArgumentException;
use Yii;
use yii\base\Action;
use yii\base\Exception;
use yii\base\InvalidConfigException;
use Yii\base\InvalidParamException;
use yii\console\Controller;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;

class RoutesControllerTest extends \Codeception\Test\Unit
{
    /**
     * @var \cetver\RoutesCollector\tests\FunctionalTester
     */
    protected $tester;

    public function testActionExtractMessages()
    {
        Yii::$app->controllerMap = [
            'message' => 'yii\console\controllers\MessageController',
        ];
        $controller = $this->getRoutesController();

        $this->tester->expectException(
            new InvalidArgumentException('The "commandMessageExtractOptions" argument must be a string.'),
            function () use ($controller) {
                $controller->run('extract-messages', [
                    []
                ]);
            }
        );

        $this->tester->expectException(
            new InvalidArgumentException('The "translatorCategory" argument must be a string.'),
            function () use ($controller) {
                $controller->run('extract-messages', [
                    '',
                    []
                ]);
            }
        );

        $this->tester->expectException(
            InvalidParamException::class,
            function () use ($controller) {
                $controller->run('extract-messages', [
                    'invalid json'
                ]);
            }
        );

        $this->tester->expectException(
            Exception::class,
            function () use ($controller) {
                $controller->run('extract-messages', [
                    Json::encode(['sourcePath' => '/' . uniqid()])
                ]);
            }
        );

        $exitCode = $controller->run('extract-messages', [
            Json::encode(['format' => 'unexpected format'])
        ]);
        $this->tester->assertSame($controller::EXIT_CODE_ERROR, $exitCode);

        $sourceFile = Yii::getAlias('@cetver/RoutesCollector/tests/_data/runtime/cetver-routes-collector-commands-routes-controller-action-extract-messages.php');
        $controller->run('extract-messages', [
            Json::encode([
                'sourcePath' => dirname($sourceFile),
                'messagePath' => '@cetver/RoutesCollector/tests/_data/messages',
            ]),
            'routes-php'
        ]);
        $this->tester->assertFileExists($sourceFile);
        $actualSourceFileContent = file_get_contents($sourceFile);
        $expectedSourceFileContent = <<<EOD
<?php

/**
 * This file is automatically generated by 'yii routes/extract-messages' command.
 * It contains calls of the translator function for source code messages extraction.
 */


EOD;
        $ids = Route::find()->select('id')->orderBy('id')->column();
        foreach ($ids as $id) {
            $expectedSourceFileContent .= sprintf('Yii::t("routes-php", "%s");%s', $id, PHP_EOL);
        }
        $this->tester->assertSame($expectedSourceFileContent, $actualSourceFileContent);
        $sourceFile = Yii::getAlias('@cetver/RoutesCollector/tests/_data/messages/en-US/routes-php.php');
        $this->tester->assertFileExists($sourceFile);
        $translations = require $sourceFile;
        $actualIds = array_keys($translations);
        asort($actualIds);
        asort($ids);
        $ids = array_values($ids);
        $this->tester->assertSame($ids, $actualIds);

        $this->addTranslations($sourceFile);
    }

    public function testActionCollect()
    {
        $controller = $this->getRoutesController();

        $configFile = sys_get_temp_dir();
        $this->tester->expectException(
            new InvalidArgumentException(sprintf(
                'The "%s" configuration file does not exist.',
                $configFile
            )),
            function () use ($controller, $configFile) {
                $controller->run('collect', [$configFile]);
            }
        );

        $db = Yii::$app->db;
        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/invalid.php';
        $this->tester->expectException(
            InvalidConfigException::class,
            function () use ($controller, $configFile) {
                $controller->run('collect', [$configFile]);
            }
        );
        Yii::$app->set('db', $db);

        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/dummy.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame([], $this->getActualRows());

        // update
        Route::updateAll(
            ['parent_id' => null],
            ['IN', 'id', ['basic/examples/default/aliases-i18n', 'basic/examples/default/ordered-tree']]
        );

        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/config.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame($this->getExpectedRows(), $this->getActualRows());

        Route::updateAll(
            ['type' => 10],
            ['IN', 'id', ['basic/examples/default/aliases-i18n', 'basic/examples/default/ordered-tree']]
        );
        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/config.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame($this->getExpectedRows(), $this->getActualRows());

        Route::updateAll(
            ['parent_id' => null, 'type' => 10,],
            ['IN', 'id', ['basic/examples/default/aliases-i18n', 'basic/examples/default/ordered-tree']]
        );
        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/config.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame($this->getExpectedRows(), $this->getActualRows());

        // insert without dupes
        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/config.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame($this->getExpectedRows(), $this->getActualRows());

        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/config.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame($this->getExpectedRows(), $this->getActualRows());

        // delete
        Route::getDb()
             ->createCommand()
             ->batchInsert(Route::tableName(), ['id', 'parent_id', 'type'], [
                ['id-to-delete-1', 'parent-id-to-delete-1', 10],
                ['id-to-delete-2', 'parent-id-to-delete-2', 10],
                ['id-to-delete-3', null, 10],
             ])
             ->execute();
        $configFile = Fixtures::get('command_routes_collect_config_dir') . '/config.php';
        $controller->run('collect', [$configFile]);
        $this->tester->assertSame($this->getExpectedRows(), $this->getActualRows());
    }

    public function testBeforeAction()
    {
        $controller = $this->getRoutesController();
        $action = new Action('action', $controller);
        $this->tester->assertSame($controller->beforeAction($action), true);

        $controller->model = 'stdClass';
        $this->tester->expectException(
            new InvalidConfigException(sprintf(
                'The "model" option must be a instance of "%s".', Route::className()
            )),
            function () use ($controller, $action) {
                $controller->beforeAction($action);
            }
        );
    }

    public function testOptionAliases()
    {
        $this->tester->assertSame(
            array_merge(
                $this->getConsoleController()->optionAliases(),
                [
                    'm' => 'model',
                    'v' => 'verbose',
                ]
            ),
            $this->getRoutesController()->optionAliases()
        );
    }

    public function testOptions()
    {
        $this->tester->assertSame(
            array_merge($this->getConsoleController()->options(null), ['model', 'verbose']),
            $this->getRoutesController()->options(null)
        );
    }

    protected function getRoutesController()
    {
        return new RoutesController('routes', Yii::$app, [
            'verbose' => false
        ]);
    }

    protected function getConsoleController()
    {
        return new Controller('controller', Yii::$app);
    }

    protected function sortRows(&$rows)
    {
        ArrayHelper::multisort($rows, ['type', 'id'], [SORT_ASC, SORT_ASC]);
    }

    protected function getActualRows()
    {
        $rows = Route::find()->asArray()->all();
        $this->sortRows($rows);
        foreach ($rows as &$row) {
            $row['type'] = (int)$row['type'];
        }

        return $rows;
    }

    protected function getExpectedRows()
    {
        $rows = [];
        $apps = [
            'basic',
            'backend',
            'frontend'
        ];
        $examplesModule = [
            'id' => 'examples',
            'controllers' => [
                [
                    'id' => 'default',
                    'actions' => [
                        'tree',
                        'ordered-tree',
                        'aliases-i18n',
                        'real-life',
                    ],
                ],
                [
                    'id' => 'pages',
                    'actions' => [
                        'first',
                        'second',
                        'third',
                    ],
                ],
            ],
        ];
        $modules = [
            'first-module',
            'first-module/no-controllers',
            'first-module/2-nested-module',
            'first-module/2-nested-module/FirstNestedModule',
        ];
        $webControllers = [
            'basic',
            'f-i-r-s-t',
            'second',
            '3',
        ];
        $webActions = [
            'error',
            'standaloneAction',
            'StandaloneAction',
            'standalone-action',
            'action',
            '123',
            'a-a-a123-a-a-a123',
        ];
        $restControllers = [
            'rest',
        ];
        $restActions = [
            'action',
            'create',
            'delete',
            'index',
            'options',
            'update',
            'view',
        ];

        foreach ($apps as $app) {
            $rows[] = [
                'id' => $app,
                'parent_id' => null,
                'type' => Route::TYPE_APPLICATION,
            ];
            // modules
            if ($app !== 'frontend') {
                $exampleModuleId = implode(Route::SEPARATOR_ROUTE, [$app, $examplesModule['id']]);
                $rows[] = [
                    'id' => $exampleModuleId,
                    'parent_id' => $app,
                    'type' => Route::TYPE_MODULE,
                ];
                foreach ($examplesModule['controllers'] as $exampleModuleController) {
                    $exampleModuleControllerId = implode(Route::SEPARATOR_ROUTE, [
                        $exampleModuleId,
                        $exampleModuleController['id'],
                    ]);
                    $rows[] = [
                        'id' => $exampleModuleControllerId,
                        'parent_id' => $exampleModuleId,
                        'type' => Route::TYPE_CONTROLLER,
                    ];
                    foreach ($exampleModuleController['actions'] as $exampleModuleAction) {
                        $rows[] = [
                            'id' => implode(Route::SEPARATOR_ROUTE, [
                                $exampleModuleControllerId,
                                $exampleModuleAction,
                            ]),
                            'parent_id' => $exampleModuleControllerId,
                            'type' => Route::TYPE_ACTION,
                        ];
                    }
                }
            }
            foreach ($modules as $module) {
                $moduleId = implode(Route::SEPARATOR_ROUTE, [$app, $module]);
                $moduleChunks = explode(Route::SEPARATOR_ROUTE, $module);
                if (count($moduleChunks) === 1) {
                    $moduleParentId = $app;
                } else {
                    array_pop($moduleChunks);
                    array_unshift($moduleChunks, $app);
                    $moduleParentId = implode(Route::SEPARATOR_ROUTE, $moduleChunks);
                }
                $rows[] = [
                    'id' => $moduleId,
                    'parent_id' => $moduleParentId,
                    'type' => Route::TYPE_MODULE,
                ];
                if ($module !== 'first-module/no-controllers') {
                    foreach ($webControllers as $webController) {
                        $webControllerId = implode(Route::SEPARATOR_ROUTE, [$moduleId, $webController]);
                        $rows[] = [
                            'id' => $webControllerId,
                            'parent_id' => $moduleId,
                            'type' => Route::TYPE_CONTROLLER,
                        ];
                        foreach ($webActions as $webAction) {
                            $rows[] = [
                                'id' => implode(Route::SEPARATOR_ROUTE, [$webControllerId, $webAction]),
                                'parent_id' => $webControllerId,
                                'type' => Route::TYPE_ACTION,
                            ];
                        }
                    }
                    foreach ($restControllers as $restController) {
                        $restControllerId = implode(Route::SEPARATOR_ROUTE, [$moduleId, $restController]);
                        $rows[] = [
                            'id' => $restControllerId,
                            'parent_id' => $moduleId,
                            'type' => Route::TYPE_CONTROLLER,
                        ];
                        foreach ($restActions as $restAction) {
                            $rows[] = [
                                'id' => implode(Route::SEPARATOR_ROUTE, [$restControllerId, $restAction]),
                                'parent_id' => $restControllerId,
                                'type' => Route::TYPE_ACTION,
                            ];
                        }
                    }
                }
            }
            // controllers
            foreach ($webControllers as $webController) {
                $webControllerId = implode(Route::SEPARATOR_ROUTE, [$app, $webController]);
                $rows[] = [
                    'id' => $webControllerId,
                    'parent_id' => $app,
                    'type' => Route::TYPE_CONTROLLER,
                ];
                foreach ($webActions as $webAction) {
                    $rows[] = [
                        'id' => implode(Route::SEPARATOR_ROUTE, [$webControllerId, $webAction]),
                        'parent_id' => $webControllerId,
                        'type' => Route::TYPE_ACTION,
                    ];
                }
            }
            foreach ($restControllers as $restController) {
                $restControllerId = implode(Route::SEPARATOR_ROUTE, [$app, $restController]);
                $rows[] = [
                    'id' => $restControllerId,
                    'parent_id' => $app,
                    'type' => Route::TYPE_CONTROLLER,
                ];
                foreach ($restActions as $restAction) {
                    $rows[] = [
                        'id' => implode(Route::SEPARATOR_ROUTE, [$restControllerId, $restAction]),
                        'parent_id' => $restControllerId,
                        'type' => Route::TYPE_ACTION,
                    ];
                }
            }
        }
        $this->sortRows($rows);

        return $rows;
    }

    protected function addTranslations($path)
    {
        $content = file_get_contents($path);
        $patterns = [
            sprintf('/%s/', preg_quote("'backend' => ''", '/')),
            sprintf('/%s/', preg_quote("'frontend' => ''", '/')),

            sprintf('/%s/', preg_quote("'basic/examples' => ''", '/')),
            sprintf('/%s/', preg_quote("'basic/examples/default' => ''", '/')),
            sprintf('/%s/', preg_quote("'basic/examples/default/aliases-i18n' => ''", '/')),
            sprintf('/%s/', preg_quote("'basic/examples/default/ordered-tree' => ''", '/')),
            sprintf('/%s/', preg_quote("'basic/examples/default/real-life' => ''", '/')),
            sprintf('/%s/', preg_quote("'basic/examples/default/tree' => ''", '/')),

            sprintf('/%s/', preg_quote("'backend/examples' => ''", '/')),
            sprintf('/%s/', preg_quote("'backend/examples/default' => ''", '/')),
            sprintf('/%s/', preg_quote("'backend/examples/default/aliases-i18n' => ''", '/')),
            sprintf('/%s/', preg_quote("'backend/examples/default/ordered-tree' => ''", '/')),
            sprintf('/%s/', preg_quote("'backend/examples/default/real-life' => ''", '/')),
            sprintf('/%s/', preg_quote("'backend/examples/default/tree' => ''", '/')),
        ];
        $replacements = [
            "'backend' => 'Backend'",
            "'frontend' => 'Frontend'",

            "'basic/examples' => 'Examples'",
            "'basic/examples/default' => 'Default'",
            "'basic/examples/default/aliases-i18n' => 'Aliases (i18n)'",
            "'basic/examples/default/ordered-tree' => 'Ordered Tree'",
            "'basic/examples/default/real-life' => 'Real Life'",
            "'basic/examples/default/tree' => 'Tree'",

            "'backend/examples' => 'Examples'",
            "'backend/examples/default' => 'Default'",
            "'backend/examples/default/aliases-i18n' => 'Aliases (i18n)'",
            "'backend/examples/default/ordered-tree' => 'Ordered Tree'",
            "'backend/examples/default/real-life' => 'Real Life'",
            "'backend/examples/default/tree' => 'Tree'",
        ];
        $content = preg_replace($patterns, $replacements, $content);
        file_put_contents($path, $content, LOCK_EX);
    }
}